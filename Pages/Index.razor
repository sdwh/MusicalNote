@page "/Basic"
@inject HttpClient Http

<PageTitle>Musical Note</PageTitle>

<h1 class="fw-bolder">Basic Mode</h1>

@if (notes == null)
{
    <p><em>Musical Note Training Loading.</em></p>
}
else
{
    <DisplaySummary Correct="Correct" Error="Error" TimeElapsed="timeElapsed"></DisplaySummary>

    <div class="my-5" style="font-size: 128px">
        @if (QuesGroup == 1 && questionType == "Keysignature")
        {
            @answer.Keysignature
        }
        else if (QuesGroup == 1 && questionType == "Solfege")
        {
            @answer.Solfege
        }
        else if (QuesGroup == 2 && questionType == "Pitch2Image")
        {
            @answer.Keysignature
        }
        else if (QuesGroup == 2 && questionType == "Image2Pitch")
        {
            <img src="note/@(answer.Image).svg"/>
        }
        else if (QuesGroup == 3)
        {
            @if (QuesType3Setting.QuestionSide == "Keysignature")
            {
                @answer.Keysignature
            }
            else
            {
                @answer.Solfege
            }
            <div style="font-size:32px">@(QuesType3Setting.Direction)音</div>
        }
        else
        {
            <div class="btn btn-lg btn-success mt-3" @onclick="GetNotes">
                Next
            </div>
        }
    </div>

    <div class="d-flex justify-content-center mx-auto flex-wrap">
    @foreach (var note in thisRound)
    {
        <div class="btn btn-outline-info btn-lg me-3 rounded-3 mb-2 mb-lg-0 @(previousAnswer == "specialSituation" ? "d-none" : "")" 
            @onclick="() => Answer(note)">
            @if (QuesGroup == 1 && questionType == "Keysignature")
            {
                @note.Solfege
            }
            else if (QuesGroup == 1 && questionType == "Solfege")
            {
                @note.Keysignature
            }
            else if (QuesGroup == 2 && questionType == "Pitch2Image")
            {
                <img src="note/@(note.Image).svg" />
            }
            else if (QuesGroup == 2 && questionType == "Image2Pitch")
            {
                @note.Keysignature
            }
            else if (QuesGroup == 3 && QuesType3Setting.Direction == "前一個")
            {
                if (QuesType3Setting.AnswerSide == "Keysignature")
                {
                    @note.Prevk
                }
                else
                {
                    @note.Prevs
                }
            }
            else if (QuesGroup == 3 && QuesType3Setting.Direction == "下一個")
            {
                if (QuesType3Setting.AnswerSide == "Keysignature")
                {
                    @note.Nextk
                }
                else
                {
                    @note.Nexts
                }
            }
        </div>
    }
    </div>

    @if (!string.IsNullOrEmpty(previousAnswer))
    {
        <div class="border border-1 p-3 rounded-3 mt-3 @(previousAnswerCorrect ? "border-success" : "border-danger")">

            @if (previousAnswer != "specialSituation")
            {
                @previousAnswer
            }
            else
            {
                foreach (var note in thisRound)
                {
                    <div class="d-inline-block">
                        <span class="fw-bolder fs-5">@note.Keysignature</span> <img src="note/@(note.Image).svg" />
                    </div>
                }
            }
        </div>

        <div class="btn btn-lg btn-success mt-3" @onclick="GetNotes">
            Next
        </div>
    }
    
}

<div>
    <NavLink href="" class="btn btn-info my-3">Menu</NavLink>
</div>

<div class="mt-5 text-secondary">Last Update Date: 2024-01-01</div>

@code {
    private Note[]? notes;
    private List<Note> thisRound = new List<Note> { };
    private Note answer { get; set; }
    private string questionType { get; set; } = "";
    private string previousAnswer { get; set; } = "";
    private int Correct { get; set; } = 0;
    private int Error { get; set; } = 0;
    private bool previousAnswerCorrect { get; set; } = true;
    private TimeSpan timeElapsed;
    private System.Timers.Timer timer;
    private int QuesGroup { get; set; }
    private LinkNote QuesType3Setting { get; set; } = new LinkNote { };

    protected override async Task OnInitializedAsync()
    {
        notes = await Http.GetFromJsonAsync<Note[]>("sample-data/notes.json");

        GetNotes();

        timeElapsed = TimeSpan.Zero;
        SetupTimer();
    }

    public async void Answer(Note userAnswer)
    {

        if (userAnswer == answer)
        {
            Correct += 1;
            previousAnswerCorrect = true;
            GetNotes();
        }
        else
        {
            Error += 1;
            previousAnswerCorrect = false;
            if (QuesGroup == 1)
            {
                previousAnswer = $"{answer.Keysignature} is {answer.Solfege}";
            }
            else if (QuesGroup == 2 && questionType == "Image2Pitch")
            {
                previousAnswer = $"This Note is {answer.Keysignature}";
            }
            else if (QuesGroup == 2 && questionType == "Pitch2Image")
            {
                previousAnswer = "specialSituation";
            }
            else if (QuesGroup == 3)
            {
                previousAnswer = $"{answer.Prevk} ({answer.Prevs}) ⬅ {answer.Keysignature} ({answer.Solfege}) ➡ {answer.Nextk} ({answer.Nexts})";
            }
        }

    }

    public void GetNotes()
    {
        previousAnswer = "";
        var previous = answer;
        var random = new Random();
        QuesGroup = random.Next(1, 4);

        if (QuesGroup == 1)
        {
            var questionTypes = new List<string> { "Keysignature", "Solfege" };
            do
            {
                questionType = questionTypes[random.Next(questionTypes.Count)];
                thisRound = notes.Where(i => i.Group == 1).OrderBy(x => random.Next()).Take(4).ToList();
                answer = thisRound.OrderBy(x => random.Next()).First();
            } while (answer == previous);
        }
        else if (QuesGroup == 2)
        {
            var questionTypes = new List<string> { "Pitch2Image", "Image2Pitch" };
            string answerChar = "ABCDEFG"[new Random().Next(7)].ToString();

            questionType = questionTypes[random.Next(questionTypes.Count)];


            thisRound = notes.Where(i => i.Group == 2)
                                 .Where(i => i.Keysignature != answerChar)
                                 .OrderBy(x => random.Next()).DistinctBy(i => i.Keysignature).Take(3).ToList();

            answer = notes.Where(i => i.Group == 2)
                                 .Where(i => i.Keysignature == answerChar)
                                 .OrderBy(x => random.Next()).Take(1).First();

            thisRound.Add(answer);
            thisRound = thisRound.OrderBy(x => random.Next()).ToList();
        }
        else if (QuesGroup == 3)
        {
            var questionSideChoose =  new List<string> { "Keysignature", "Solfege" };
            var directionChoose = new List<string> { "前一個", "下一個" };

            QuesType3Setting.QuestionSide = questionSideChoose[random.Next(questionSideChoose.Count)];
            QuesType3Setting.Direction = directionChoose[random.Next(questionSideChoose.Count)];
            QuesType3Setting.AnswerSide = questionSideChoose[random.Next(questionSideChoose.Count)];

            thisRound = notes.Where(i => i.Group == 3).OrderBy(x => random.Next()).Take(4).ToList();
            answer = thisRound.OrderBy(x => random.Next()).First();
        }

    }

    private void SetupTimer()
    {
        timer = new System.Timers.Timer(1000); // Fires every second
        timer.Elapsed += TimerElapsed;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void TimerElapsed(Object source, System.Timers.ElapsedEventArgs e)
    {
        timeElapsed = timeElapsed.Add(TimeSpan.FromSeconds(1));
        InvokeAsync(StateHasChanged); // Re-render the component
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    public class Note
    {
        public string? Keysignature { get; set; }

        public string? Solfege { get; set; }

        public int Group { get; set; }

        public string? Absolute { get; set; }

        public string? Image { get; set; }

        public string? Nextk { get; set; }

        public string? Nexts { get; set; }

        public string? Prevk { get; set; }

        public string? Prevs { get; set; }
    }

    public class LinkNote
    {
        public string? QuestionSide { get; set; }
        public string? Direction { get; set; }
        public string? AnswerSide { get; set; }

    }
}
